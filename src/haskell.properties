# Define SciTE settings for Haskell.

lexer.*.hs=haskell
filter.hs=Haskell (hs)|*.hs|

*filter.hs=$(filter.hs)

*language.haskell=Haskell|hs||

# white space
style.haskell.0=fore:#808080
# identifier
style.haskell.1=
# keyword
style.haskell.2=$(colour.keyword),bold
# numbers
style.haskell.3=$(colour.number)
# string
style.haskell.4=$(colour.string)
# character
style.haskell.5=$(colour.char)
# class: error not implemented
style.haskell.6=back:#FF0000
# module
style.haskell.7=
# capital
style.haskell.8=
# data: error not implemented
style.haskell.9=back:#FF0000
# import: error not implemented
style.haskell.10=back:#FF0000
# operator
style.haskell.11=$(colour.operator),bold
# instance: error not implemented
style.haskell.12=back:#FF0000
# line comment
style.haskell.13=$(colour.code.comment.line),$(font.code.comment.line)
# block comment
style.haskell.14=$(colour.code.comment.box),$(font.code.comment.box)
# block comment 2
style.haskell.15=$(colour.code.comment.box),$(font.code.comment.box)
# block comment 3
style.haskell.16=$(colour.code.comment.box),$(font.code.comment.box)
# pragma
style.haskell.17=fore:#BF6F00
# preprocessor
style.haskell.18=$(colour.preproc)
# End of line where string is not closed
style.haskell.19=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Reserved operator
style.haskell.20=back:#FF8080

# Available in literatehaskell lexer:
# Literate comment
style.haskell.21=fore:#DD9900,$(font.code.comment.line),italics
# Literate delimiter
style.haskell.22=fore:#EE00AA

# keywords for Haskell 98
keywordclass.haskell98=case class data default deriving do else hiding if \
import in infix infixl infixr instance let module \
newtype of then type where forall foreign

# keywords for FFI
keywordclass.ffi=export label dynamic safe threadsafe \
unsafe stdcall ccall prim

keywords.*.hs=$(keywordclass.haskell98)

keywords2.*.hs=$(keywordclass.ffi)
