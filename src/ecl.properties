file.patterns.ecl=*.ecl;*.eclattr;*.hql
filter.ecl=ECL (ecl eclattr hql)|$(file.patterns.ecl)|
*filter.ecl=$(filter.ecl)
lexer.$(file.patterns.ecl)=ecl

word.chars.ecl=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.ecl)=$(word.chars.ecl)
calltip.ecl.word.characters=$(chars.alpha)$(chars.numeric)_

#comment.block.at.line.start.ecl=1
comment.block.ecl=//
comment.stream.start.ecl=/+
comment.stream.end.ecl=+/
comment.box.start.ecl=/*
comment.box.middle.ecl= *
comment.box.end.ecl= */
#lexer.ecl.fold.at.else=1

statement.indent.$(file.patterns.ecl)=record module
statement.end.$(file.patterns.ecl)=13 ;
statement.lookback.$(file.patterns.ecl)=20
block.start.$(file.patterns.ecl)=13 {
block.end.$(file.patterns.ecl)=13 }

style.ecl.0=fore:#00000000
style.ecl.1=fore:#00800000
style.ecl.2=fore:#00800000
style.ecl.3=fore:#00000000
style.ecl.4=fore:#80808000
style.ecl.5=fore:#0000FF00
style.ecl.6=fore:#00000000
style.ecl.7=fore:#80808000
style.ecl.8=fore:#00000000
style.ecl.9=fore:#00408000
style.ecl.10=fore:#00000000
style.ecl.11=fore:#00000000
style.ecl.12=fore:#00000000
style.ecl.13=fore:#00000000
style.ecl.14=fore:#00000000
style.ecl.15=fore:#00000000
style.ecl.16=bold,fore:#00008000
style.ecl.17=bold,fore:#7F7F7F00
style.ecl.18=fore:#FF000000
style.ecl.19=fore:#80000000
style.ecl.20=fore:#80000000
style.ecl.21=fore:#80008000
style.ecl.22=fore:#80008000
style.ecl.23=fore:#7F7F7F00
style.ecl.24=fore:#00000000
style.ecl.25=fore:#00000000
style.ecl.26=fore:#00000000
style.ecl.27=fore:#00000000
style.ecl.32=fore:#00000000,$(font.monospace)
style.ecl.34=bold,fore:#00000000
style.ecl.35=fore:#FF000000
style.ecl.36=fore:#80800000
style.ecl.37=fore:#80000000

keywords.$(file.patterns.ecl)=abs acos ascii asin asstring atan atan2 ave case choose choosen choosesets clustersize cos cosh count cron dataset dedup denormalize distribute distributed distribution ebcdic enth error evaluate event exists exp fetch fromunicode getisvalid global group hash hash32 hash64 hashcrc hashmd5 if index intformat isvalid iterate join keyunicode length limit ln log map matched matchlength matchposition matchtext matchunicode max merge min normalize parse pipe power preload project pull random rank ranked realformat recordof regexfind regexreplace rejected rollup round roundup row rowdiff sample set sin sinh sizeof soapcall sort sorted sqrt sum table tan tanh topn tounicode transfer trim truncate typeof ungroup unicodeorder which workunit xmldecode xmlencode xmltext xmlunicode
keywords2.$(file.patterns.ecl)=apply build buildindex evaluate fail keydiff keypatch loadxml notify output parallel sequential soapcall
keywords3.$(file.patterns.ecl)=__compressed__ all and any as atmost before beginc++ best between case const counter csv descend encrypt end endc++ endmacro except exclusive expire export extend false few first flat full function group header heading hole ifblock import in joined keep keyed last left limit load local locale lookup macro many maxcount maxlength min skew module named nocase( noroot noscan nosort not of only opt or outer overwrite packed partition penalty physicallength pipe quote record relationship repeat return right scan self separator service shared skew skip sql store terminator thor threshold token transform trim true type unicodeorder unsorted validate virtual whole wild within xml xpath
keywords4.$(file.patterns.ecl)=ascii big_endian boolean data decimal ebcdic integer pattern qstring real record rule set of string token udecimal unicode unsigned varstring varunicode
keywords5.$(file.patterns.ecl)=checkpoint deprecated failcode failmessage failure global independent onwarning persist priority recovery stored success wait when
keywords6.$(file.patterns.ecl)=#append #break #declare #demangle #end #for #getdatatype #if #inmodule #loop #mangle #onwarning #option #set #stored #uniquename #workunit integer symbol value text symbol value

#command.build.$(file.patterns.ecl)=eclcc.exe -I"$(HPCCBIN)\ecllibrary" -I"$(HPCCBIN)\ecllibrary" -I"$(HPCCBIN)\plugins" "$(FileNameExt)"
