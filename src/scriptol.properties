# Define SciTE settings for scriptol files.

filter.scriptol=Scriptol (sol)|*.sol|

*filter.scriptol=$(filter.scriptol)

lexer.*.sol=scriptol

file.patterns.sol=*.sol

keywordclass.scriptol= act action alias always and array as \
bool boolean break by byte \
class case catch const constant continue \
dyn def define dict do double \
echo else elsif end enum error false file for float forever function \
globak gtk \
in if ifdef import include int integer java javax \
let long match mod nil not natural null number \
or print protected public real return redo \
scan script scriptol sol short super static step until using \
var text then this true try \
void volatile while when \
undef zero
keywords.$(file.patterns.sol)=$(keywordclass.scriptol)

statement.indent.*.sol=
statement.lookback.*.sol=1
block.start.*.sol=10

comment.block.scriptol=`~

# scriptol styles
# Default
style.scriptol.0=fore:#000000
# White space
style.scriptol.1=fore:#808080
# Scriptol style comment line
style.scriptol.2=fore:#007F00,$(font.comment)
# Persistent comment line
style.scriptol.3=fore:#007F00,$(font.comment)
# C style comment line
style.scriptol.4=fore:#007F00
# Comment-blocks
style.scriptol.5=fore:#007F00,$(font.comment)
# Number
style.scriptol.6=fore:#007F7F
# String
style.scriptol.7=fore:#7F007F,$(font.monospace)
# Character/Single quoted string
style.scriptol.8=fore:#7F007F,$(font.monospace)
# End of line where string is not closed
style.scriptol.9=fore:#FF0000,$(font.monospace),back:#E0C0E0,eolfilled
# Keyword
style.scriptol.10=fore:#00007F,bold
# Operators
style.scriptol.11=bold
# Identifiers
style.scriptol.12=fore:#333333
# Triple quotes
style.scriptol.13=
# style.scriptol.13=fore:#007F00
# Class name definition
style.scriptol.14=fore:#0000FF,bold
# Preprocessor
style.scriptol.15=
# style.scriptol.15=fore:#7F0000


if PLAT_WIN
        command.help.$(file.patterns.sol)="file://$(SciteDefaultHome)\manual.html"
        command.help.subsystem.$(file.patterns.sol)=2

if PLAT_GTK
        command.help.$(file.patterns.sol)=man $(CurrentWord) | col -b

command.compile.*.sol=solc -c $(FileNameExt)
command.build.*.sol=solc -be $(FileNameExt)
command.go.*.sol=$(FileName)
command.go.subsystem.*.sol=1

command.name.0.*.sol=XSolP
command.0.*.sol =xsolp -be $(FileNameExt)
command.is.filter.0.*.sol=1

command.name.1.*.sol=XSolC
command.1.*.sol =xsolc -be $(FileNameExt)
command.is.filter.1.*.sol=1

command.name.2.*.sol=Compile to Php
command.2.*.sol=solp -b $(FileNameExt)
command.is.filter.2.*.sol=1

command.name.3.*.sol=Compile Web page
command.3.*.sol=solp -b -w $(FileNameExt)
command.is.filter.3.*.sol=1

command.name.4.*.sol=Interpret
command.4.*.sol=solp $(FileNameExt)
command.is.filter.4.*.sol=1

