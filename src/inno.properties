# Define SciTE settings for Inno Setup script files.

file.patterns.inno=*.iss;*.isl

filter.inno=Inno Setup (iss isl)|$(file.patterns.inno)|

*filter.inno=$(filter.inno)

lexer.$(file.patterns.inno)=inno

*language.innosetup=&InnoSetup|iss||

comment.block.inno=;~

# Sections
keywords.$(file.patterns.inno)=\
code components custommessages dirs files icons ini installdelete \
langoptions languages messages registry run setup tasks types \
uninstalldelete uninstallrun

# Keywords
keywords2.$(file.patterns.inno)=\
allowcancelduringinstall allownetworkdrive allownoicons \
allowrootdirectory allowuncpath alwaysrestart alwaysshowcomponentslist \
alwaysshowdironreadypage alwaysshowgrouponreadypage \
alwaysusepersonalgroup appcomments appcontact appcopyright \
appenddefaultdirname appenddefaultgroupname appid appmodifypath \
appmutex appname apppublisher apppublisherurl appreadmefile \
appsupportphone appsupporturl appupdatesurl appvername appversion \
architecturesallowed architecturesinstallin64bitmode aslrcompatible \
backcolor backcolor2 backcolordirection backsolid changesassociations \
changesenvironment closeapplications closeapplicationsfilter \
compression compressionthreads createappdir createuninstallregkey \
defaultdialogfontname defaultdirname defaultgroupname \
defaultuserinfoname defaultuserinfoorg defaultuserinfoserial \
depcompatible direxistswarning disabledirpage disablefinishedpage \
disableprogramgrouppage disablereadymemo disablereadypage \
disablestartupprompt disablewelcomepage diskclustersize diskslicesize \
diskspanning enabledirdoesntexistwarning encryption \
extradiskspacerequired flatcomponentslist infoafterfile infobeforefile \
internalcompresslevel languagedetectionmethod licensefile \
lzmaalgorithm lzmablocksize lzmadictionarysize lzmamatchfinder \
lzmanumblockthreads lzmanumfastbytes lzmauseseparateprocess \
mergeduplicatefiles minversion missingmessageswarning \
missingrunonceidswarning notrecognizedmessageswarning onlybelowversion \
output outputbasefilename outputdir outputmanifestfile password \
privilegesrequired privilegesrequiredoverridesallowed reservebytes \
restartapplications restartifneededbyrun setupiconfile setuplogging \
setupmutex showcomponentsizes showlanguagedialog showtaskstreelines \
signeduninstaller signeduninstallerdir signtool \
signtoolminimumtimebetween signtoolretrycount signtoolretrydelay \
signtoolrunminimized slicesperdisk solidcompression sourcedir \
terminalservicesaware timestamprounding timestampsinutc touchdate \
touchtime uninstallable uninstalldisplayicon uninstalldisplayname \
uninstalldisplaysize uninstallfilesdir uninstalllogmode \
uninstallrestartcomputer updateuninstalllogappname \
useduserareaswarning usepreviousappdir usepreviousgroup \
usepreviouslanguage usepreviousprivileges useprevioussetuptype \
useprevioustasks useprevioususerinfo userinfopage usesetupldr \
versioninfocompany versioninfocopyright versioninfodescription \
versioninfooriginalfilename versioninfoproductname \
versioninfoproducttextversion versioninfoproductversion \
versioninfotextversion versioninfoversion windowresizable \
windowshowcaption windowstartmaximized windowvisible \
wizardimagealphaformat wizardimagefile wizardimagestretch \
wizardresizable wizardsizepercent wizardsmallimagefile wizardstyle

# Parameters
keywords3.$(file.patterns.inno)=\
afterinstall appusermodelid appusermodeltoastactivatorclsid attribs \
beforeinstall check comment components description destdir destname \
excludes externalsize extradiskspacerequired filename flags \
fontinstall groupdescription hotkey iconfilename iconindex \
infoafterfile infobeforefile key languages licensefile messagesfile \
minversion name onlybelowversion parameters permissions root runonceid \
section source statusmsg string strongassemblyname subkey tasks type \
types valuedata valuename valuetype verb workingdir

# Preprocessor directives
keywords4.$(file.patterns.inno)=\
append define dim elif else emit endif endsub error expr file for if \
ifdef ifexist ifndef ifnexist include insert pragma redim sub undef

# Pascal keywords
keywords5.$(file.patterns.inno)=\
and begin break case const continue do downto else end except exit \
false finally for function if not of on or procedure repeat then to \
true try type until uses var while with

# User defined keywords
keywords6.$(file.patterns.inno)=

# Properties styles

# Default
style.inno.0=
# Comment
style.inno.1=$(colour.number),$(font.comment)
# Keyword
style.inno.2=$(colour.keyword)
# Parameter
style.inno.3=$(colour.keyword)
# Section
style.inno.4=back:#FFFFC0
# Preprocessor
style.inno.5=$(colour.preproc)
# Preprocessor (inline)
style.inno.6=$(colour.preproc)
# Pascal comment
style.inno.7=$(colour.code.comment.line),$(font.comment)
# Pascal keyword
style.inno.8=$(colour.keyword)
# User defined keyword
style.inno.9=$(colour.keyword)
# Double quoted string
style.inno.10=$(colour.string)
# Single quoted string
style.inno.11=$(colour.char)
# Identifier - lexer internal. It is an error if any text is in this style.
style.inno.12=$(colour.notused)

#if PLAT_WIN
#	# Replace PATH_TO_INNOSETUP by the path to your InnoSetup installation
#	command.compile.$(file.patterns.inno)="PATH_TO_INNOSETUP\iscc.exe" $(FileNameExt)
#	command.go.$(file.patterns.inno)="PATH_TO_INNOSETUP\Compil32.exe" $(FileNameExt)
